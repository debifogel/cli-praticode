// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("cli-praktikod")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("cli-praktikod")]
[assembly: System.Reflection.AssemblyTitleAttribute("cli-praktikod")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
// Generated by the MSBuild WriteCodeFragment class.
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("fib")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("fib")]
[assembly: System.Reflection.AssemblyTitleAttribute("fib")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
// Generated by the MSBuild WriteCodeFragment class.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("fib")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Release")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+2724529a979d10bf5f28863ea8b4644a402afbdf")]
[assembly: System.Reflection.AssemblyProductAttribute("fib")]
[assembly: System.Reflection.AssemblyTitleAttribute("fib")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
// Generated by the MSBuild WriteCodeFragment class.
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
using cli_praktikod;
using System;
using System.CommandLine;
using System.Diagnostics.SymbolStore;
int SortName(string a, string b) { return a.CompareTo(b); }
//implements this function
int SortSoog(string a, string b) { 
    string s = a.Substring(a.IndexOf('.') + 1);
    string s2 = b.Substring(b.IndexOf('.') + 1);
    return s.CompareTo(s2);
}
#region option command bundle
var rootComand = new RootCommand("root command for file");
var bundleOptionOpenFile = new Option<FileInfo>("--output","file name and path");
bundleOptionOpenFile.AddAlias("-o");
var bundleOptionLanguge = new Option<string> ("--language", "which kode to copy") { IsRequired = true };
bundleOptionLanguge.FromAmong(
            ".cs",
            ".py",
            ".html",
            ".ts",
            ".tsx",
            ".js",
            ".css");
bundleOptionLanguge.AddAlias("-l");
var bundleOptionSourseKod = new Option<bool> ("--source",()=>true ," write with source kod");
bundleOptionSourseKod.AddAlias("-sk");
var bundleOptionSort = new Option<string> ("--sort",()=>"ab", "how to sort").FromAmong("ab","writer");
bundleOptionSort.AddAlias("-sr");
var bundleOptionRemoveEmpty = new Option<bool> ("--remove-empty",()=>true, "remove empty lines");
bundleOptionRemoveEmpty.AddAlias("-rmempty");
var bundleOptionWriterName = new Option<string> ("--name", "write the name of writer");
bundleOptionWriterName.AddAlias("-n");
#endregion
#region command bundle
var bundleComand = new Command("bundle", "bundle code to do a one file");
bundleComand.AddOption(bundleOptionWriterName);
bundleComand.AddOption (bundleOptionRemoveEmpty);
bundleComand.AddOption(bundleOptionSort);
bundleComand.AddOption(bundleOptionSourseKod);
bundleComand.AddOption(bundleOptionLanguge);
bundleComand.AddOption(bundleOptionOpenFile);
#endregion
#region command create rsp
var rspComand = new Command("create-rsp", "rsp for the command");
rspComand.SetHandler(
    () => {
        try
        {
            if (File.Exists("result.rsp"))
            {
                File.Delete("result.rsp");
            }
            StreamWriter file = new StreamWriter("result.rsp");
            file.Write("fib bundle ");
            string s;
            char c;
            Console.WriteLine(bundleOptionOpenFile.Name);
            s=Console.ReadLine();
            file.Write(bundleOptionOpenFile.Name+" "+s+" ");
            Console.WriteLine(bundleOptionLanguge.Name);
            s = Console.ReadLine();
            file.Write(bundleOptionLanguge.Name + " " + s+" ");
            Console.WriteLine(bundleOptionWriterName.Name);
            s = Console.ReadLine();
            file.Write(bundleOptionWriterName.Name + " " + s + " ");
            Console.WriteLine($"{bundleOptionRemoveEmpty.Name} (y/n):");
            var key = Console.ReadKey(); // Wait for a key press
            Console.WriteLine(); // Move to the next line
            if (key.KeyChar == 'y')
                file.Write(bundleOptionRemoveEmpty.Name + " ");
            else if (key.KeyChar == 'n')
                file.Write(bundleOptionRemoveEmpty.Name + " " + "false" + " ");
            else
                throw new Exception("Invalid input. Please enter 'y' or 'n'.");
            // Repeat similar changes for bundleOptionSourseKod
            Console.WriteLine($"{bundleOptionSourseKod.Name} (y/n):");
            key = Console.ReadKey();
            Console.WriteLine();
            if (key.KeyChar == 'y')
                file.Write(bundleOptionSourseKod.Name + " ");
            else if (key.KeyChar == 'n')
                file.Write(bundleOptionSourseKod.Name + " " + "false" + " ");
            else
                throw new Exception("Invalid input. Please enter 'y' or 'n'.");
            Console.WriteLine("the file result.rsp is ready ");
            file.Close();
        }
        catch (Exception)
        {
            throw;
        }
    });
#endregion
bundleComand.SetHandler((openFile,language,sourceKod,sort,removeEmpty,name)
    =>
{
    try
    {
        StreamWriter file = new StreamWriter(openFile.Name);
        if (name != "")
        { WriteTofile.WriteDetailes(name, file); }
        if (sourceKod)
        { WriteTofile.WriteDetailes("//"+Environment.ProcessPath, file); }
        file.Close();
        WriteTofile.AllCopy(Directory.GetCurrentDirectory(), bundleOptionOpenFile.Name,
            removeEmpty ? WriteTofile.WriteWithoutEmpty : WriteTofile.Write,
            sort == "ab" ? SortName : SortSoog,
            language == "all" ? ".*" : language);
    }
    catch (Exception e) { Console.WriteLine("Eror:the path is not valid"); }
},bundleOptionOpenFile, bundleOptionLanguge,bundleOptionSourseKod,bundleOptionSort,bundleOptionRemoveEmpty,bundleOptionWriterName);
rootComand.AddCommand(bundleComand);
rootComand.AddCommand(rspComand);
await rootComand.InvokeAsync(args);
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace cli_praktikod
{
    internal class WriteTofile
    {
        public static void WriteDetailes(string name, StreamWriter file)
        {
            file.WriteLine(name);
        }
        public static void Write(string path, StreamWriter file)
        {
            string content=File.ReadAllText(path);
            file.WriteLine(content );
        }
        public static void WriteWithoutEmpty(string path, StreamWriter file)
        {
            string[] lines = File.ReadAllLines(path);
            var nonEmptyLines = lines.Where(line => !string.IsNullOrWhiteSpace(line));
            foreach (var line in nonEmptyLines)
            {
                file.WriteLine(line);
            }
        }
       public  static List<string> GetFilesByExtension(string directory, string extension)
        {
            List<string> fileList = new List<string>();
            try
            {
                // Get files in the current directory with the specified extension
                fileList.AddRange(Directory.GetFiles(directory, "*" + extension));
                // Get all subdirectories
                foreach (var dir in Directory.GetDirectories(directory))
                {
                    // Recursively get files in subdirectories with the specified extension
                    fileList.AddRange(GetFilesByExtension(dir, extension));
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
            return FilterFiles(fileList);
        }
        private static bool isNot(string item)
        {
            //check what to do with the exe files
            string[] s = { ".bin", "sln", ".pdb", ".exe", ".vcxproj", ".xml", ".json", ".app", ".node", ".config",".txt" };
            foreach (var f in s)
            {
                if (item.Contains(f))
                    return false;
            }
            return true;
        }
        public static List<string>FilterFiles(List<string> files)=> files.Where(item => isNot(item)).ToList();
       public  static List<string> SortList(List<string> items, Func<string, string, int> comparisonFunc)
        {
            List<string> sortedList = new List<string>(items);
            sortedList.Sort(new Comparison<string>(comparisonFunc));
            return sortedList;
        }
       public static void CopiesFiles(List<string> files, string file,Action<string,StreamWriter>CopyFunc)
       {
            StreamWriter fileWriter = new StreamWriter(file,true);
            foreach (var item in files)
            {
                CopyFunc(item, fileWriter);
            }
            fileWriter.Close();
       }
        public static void AllCopy(string directory, string file
            , Action<string,StreamWriter>CopyFunc, Func<string, string, int> comparisonFunc, string end = ".*")
        {
            List<string>list= GetFilesByExtension(directory,end);
            list= SortList(list,comparisonFunc);
            CopiesFiles(list, file, CopyFunc);
        }
    }
}
